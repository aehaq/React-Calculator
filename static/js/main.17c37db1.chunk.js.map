{"version":3,"sources":["components/Display/index.js","components/Buttons/index.js","App.js","serviceWorker.js","index.js"],"names":["Display","props","className","display","history","current","Buttons","data-type","id","onClick","e","handleClick","App","state","firstNum","operator","isFinal","event","target","type","dataset","console","log","setState","newDisplay","calc","newNum","clear","parseInt","this","secondNum","toString","Math","pow","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.17c37db1.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Display = props =>  (\r\n    <div className=\"card-title\">\r\n        <p>{props.display.history}</p>\r\n        <p>{props.display.current}</p>\r\n    </div>\r\n)\r\nexport default Display;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Buttons = props => (\r\n    <div className=\"card-body\">\r\n        <button className=\"btn btn-primary\" data-type={\"number\"} id={\"1\"} onClick={(e) => props.handleClick(e)}>1</button>\r\n        <button className=\"btn btn-primary\" data-type={\"number\"} id={\"2\"} onClick={(e) => props.handleClick(e)}>2</button>\r\n        <button className=\"btn btn-primary\" data-type={\"number\"} id={\"3\"} onClick={(e) => props.handleClick(e)}>3</button>\r\n        <button className=\"btn btn-danger\" data-type={\"operator\"} id={\"+\"} onClick={(e) => props.handleClick(e)}>+</button>\r\n        <br />\r\n        <button className=\"btn btn-primary\" data-type={\"number\"} id={\"4\"} onClick={(e) => props.handleClick(e)}>4</button>\r\n        <button className=\"btn btn-primary\" data-type={\"number\"} id={\"5\"} onClick={(e) => props.handleClick(e)}>5</button>\r\n        <button className=\"btn btn-primary\" data-type={\"number\"} id={\"6\"} onClick={(e) => props.handleClick(e)}>6</button>\r\n        <button className=\"btn btn-danger\" data-type={\"operator\"} id={\"-\"} onClick={(e) => props.handleClick(e)}>-</button>\r\n        <br />\r\n        <button className=\"btn btn-primary\" data-type={\"number\"} id={\"7\"} onClick={(e) => props.handleClick(e)}>7</button>\r\n        <button className=\"btn btn-primary\" data-type={\"number\"} id={\"8\"} onClick={(e) => props.handleClick(e)}>8</button>\r\n        <button className=\"btn btn-primary\" data-type={\"number\"} id={\"9\"} onClick={(e) => props.handleClick(e)}>9</button>\r\n        <button className=\"btn btn-danger\" data-type={\"operator\"} id={\"x\"} onClick={(e) => props.handleClick(e)}>x</button>\r\n        <br />\r\n        <button className=\"btn btn-primary\" data-type={\"number\"} id={\"0\"} onClick={(e) => props.handleClick(e)}>0</button>\r\n        <button className=\"btn btn-danger\" data-type={\"operator\"} id={\"/\"} onClick={(e) => props.handleClick(e)}>/</button>\r\n        <button className=\"btn btn-danger\" data-type={\"operator\"} id={\"^\"} onClick={(e) => props.handleClick(e)}>^</button>\r\n        <button className=\"btn btn-success\" data-type={\"equals\"} id={\"=\"} onClick={(e) => props.handleClick(e)}>=</button>\r\n        <br />\r\n        <button className=\"btn btn-dark\" data-type={\"clear\"} id={\"clear\"} onClick={(e) => props.handleClick(e)}>clear</button>\r\n    </div>\r\n) \r\n\r\nexport default Buttons;","import React, { Component } from 'react';\nimport Display from \"./components/Display\";\nimport Buttons from \"./components/Buttons\";\n\nclass App extends Component {\n\n  state = {\n    display: {\n      current: \"\",\n      history: null,\n    },\n    firstNum: null,\n    operator: null,\n    isFinal: false\n  }\n\n  // Dev Note: We may need a boolean for whether or not \"current\" is a final output.\n  // This is so that, after clicking equals, if the user begins to type a new number, the current will be overwritten instead of appended to.\n\n  // Whenever you click a button, the event is handed down from the Buttons component to this state.\n  // \n  handleClick = event => {\n\n    let id = event.target.id\n    let type = event.target.dataset.type\n\n    console.log(`You clicked the ${id} button`)\n\n    switch (type) {\n\n      case \"operator\":\n      // when operator is clicked \n      this.setState({isFinal: false})\n  \n        if (this.state.operator === null) {\n        // if no firstNum or current operator exists, \n          // set firstNum to be current, \n          let firstNum = this.state.display.current\n          // and current becomes empty while history becomes the firstNum, \n          let newDisplay = {\n            current: \"\",\n            history: firstNum\n          }\n          // update state accordingly\n          this.setState({\n            display: newDisplay,\n            firstNum: firstNum\n          })\n        } else {\n        // If firstNum and current operator exists, \n          // run calculation\n          this.calc()\n        }\n\n        // register the operator which was clicked to state\n        this.setState({operator: id});\n        break;\n\n      case \"number\":\n      // When a number is clicked\n        let newNum;\n\n        if (this.state.isFinal) {\n          // Override previous answer if answering new question\n          newNum = id\n          this.setState({isFinal: false})\n        } else {\n          // append the clicked number to the number currently displayed\n          newNum = this.state.display.current + id;\n        }\n\n        // set the state with the new number\n        let newDisplay = {\n          current: newNum,\n          history: this.state.display.history\n        }\n        this.setState({display: newDisplay});\n        break;\n\n      case \"equals\":\n      // when equals is clicked\n\n        // Only if a firstnum already exists and a second number has been entered\n        if (this.state.firstNum != null && this.state.display.current !== \"\") {\n          this.calc()\n        }\n        // set operator to null and isfinal to true, so that the user is back to normal when typing a new number\n        this.setState({\n          operator: null,\n          isFinal: true\n        })\n        break;\n\n      case \"clear\":\n        this.clear()\n        break;\n      default:\n        break;\n    }\n  }\n\n  calc() {\n    console.log(\"calc run\")\n    let newDisplay = {}\n    let solution;\n    let firstNum = parseInt(this.state.firstNum);\n    let secondNum = parseInt(this.state.display.current);\n\n    switch (this.state.operator) {\n      case \"+\":\n        // add firstNum and secondNum\n        solution = firstNum + secondNum;\n        newDisplay = {\n          current: solution.toString(),\n          history: null\n        }\n\n        // reset state values\n        this.clear()\n        // display solution\n        this.setState({\n          display: newDisplay,\n        })\n        break;\n      case \"-\":\n        // subtract secondNum from firstNum\n        solution = firstNum - secondNum;\n        newDisplay = {\n          current: solution.toString(),\n          history: null\n        }\n\n        // reset state values\n        this.clear()\n        // display solution\n        this.setState({\n          display: newDisplay,\n        })\n        break;\n      case \"x\":\n          // multiply firstNum and secondNum\n          solution = firstNum * secondNum\n          newDisplay = {\n            current: solution.toString(),\n            history: null\n          }\n  \n          // reset state values\n          this.clear()\n          // display solution\n          this.setState({\n            display: newDisplay,\n          })\n          break;\n      case \"/\":\n        // divide firstNum by secondNum\n        solution = firstNum / secondNum\n        newDisplay = {\n          current: solution.toString(),\n          history: null\n        }\n\n        // reset state values\n        this.clear()\n        // display solution\n        this.setState({\n          display: newDisplay,\n        })\n        break;\n      case \"^\":\n        // firstNum to the power of secondNum\n        solution = Math.pow(firstNum, secondNum)\n        newDisplay = {\n          current: solution.toString(),\n          history: null\n        }\n\n        // reset state values\n        this.clear()\n        // display solution\n        this.setState({\n          display: newDisplay,\n        })\n        break;\n      default:\n        break;\n    }\n    console.log(\"complete\")\n  }\n\n  // This sets the default state.\n  // Dev note: If we use a contsructor, we can make code DRY by saving default state as a value onMount.\n  clear() {\n    let defaultDisplay = {\n      current: \"\",\n      history: null\n    }\n\n    this.setState({\n      display: defaultDisplay,\n      firstNum: null,\n      operator: null,\n      isFinal: false\n    })\n  }\n  \n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-lg-4\">\n            <div className=\"card text-center\">\n              <h1 className=\"card-header\"> Calculator </h1>\n              <Display display={this.state.display}/>\n              <Buttons handleClick={this.handleClick}/>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}